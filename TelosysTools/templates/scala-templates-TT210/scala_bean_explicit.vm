/*
 * Scala bean class for entity table ${entity.databaseTable} 
 * Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

package ${target.javaPackageFromFolder(${SRC})}

import scala.beans.BeanProperty

#foreach( $import in $java.imports($entity) )
import $import
#end

/**
 * Entity bean for table "${entity.databaseTable}"
 * 
 * @author Telosys Tools Generator
 *
 */
class $entity.name extends Serializable
{
    private val serialVersionUID = 1L

#foreach( $field in $entity.keyAttributes )
    private var $field.formattedName(12):#if($field.type=="int")Int #else $field.type #end #if($field.hasInitialValue()) = ${field.initialValue} #else =_  #end // Primary Key
#end

#foreach( $field in $entity.nonKeyAttributes )
    private var $field.formattedName(12):#if($field.type=="int")Int #else $field.type #end #if($field.hasInitialValue()) = ${field.initialValue} #else =_  #end
    
#end

//----------------------------------------------------------------------
// GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
//----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )    
    /**
     * Set the "$field.name" field value
#if ( $field.databaseName )     * This field is mapped on the database column "$field.databaseName" ( type "$field.databaseType", NotNull : $field.isDatabaseNotNull() ) 
#end
     * @param $field.name
     */
	def ${field.setter}($field.name:#if($field.type=="int")Int #else $field.type #end) = {
        this.$field.name = $field.name
    }
#end
#if ( $field.getter )    
    /**
     * Get the "$field.name" field value
#if ( $field.databaseName )     * This field is mapped on the database column "$field.databaseName" ( type "$field.databaseType", NotNull : $field.isDatabaseNotNull() ) 
#end
     * @return the field value
     */
    def ${field.getter}():#if($field.type=="int")Int #else $field.type #end= this.$field.name// ou def ${field.getter} = this.$field.name
    
#end
#end

//----------------------------------------------------------------------
// GETTER(S) & SETTER(S) FOR DATA FIELDS
//----------------------------------------------------------------------
#foreach( $field in $entity.nonKeyAttributes )
#if ( $field.databaseName )    //--- DATABASE MAPPING : $field.databaseName ( $field.databaseType ) 
#end
#if ( $field.setter )
    /**
     * Set the "$field.name" field value
#if ( $field.databaseName )     * This field is mapped on the database column "$field.databaseName" ( type "$field.databaseType", NotNull : $field.isDatabaseNotNull() ) 
#end
     * @param $field.name
     */
	def ${field.setter}($field.name:#if($field.type=="int")Int #else $field.type #end) = {
        this.$field.name = $field.name
    }
#end
#if ( $field.getter )
    /**
     * Get the "$field.name" field value
#if ( $field.databaseName )     * This field is mapped on the database column "$field.databaseName" ( type "$field.databaseType", NotNull : $field.isDatabaseNotNull() ) 
#end
     * @return the field value
     */
    def ${field.getter}():#if($field.type=="int")Int #else $field.type #end = this.$field.name// ou def ${field.getter} = this.$field.name
#end

#end  

}
