/*
 * Created on 29 avr. 2016 ( Time 13:45:39 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.Timers;
import org.demo.bean.jpa.TimersEntity;
import java.util.Date;
import org.demo.business.service.TimersService;
import org.demo.business.service.mapping.TimersServiceMapper;
import org.demo.data.repository.jpa.TimersJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of TimersService
 */
@Component
@Transactional
public class TimersServiceImpl implements TimersService {

	@Resource
	private TimersJpaRepository timersJpaRepository;

	@Resource
	private TimersServiceMapper timersServiceMapper;
	
	@Override
	public Timers findById(Integer id) {
		TimersEntity timersEntity = timersJpaRepository.findOne(id);
		return timersServiceMapper.mapTimersEntityToTimers(timersEntity);
	}

	@Override
	public List<Timers> findAll() {
		Iterable<TimersEntity> entities = timersJpaRepository.findAll();
		List<Timers> beans = new ArrayList<Timers>();
		for(TimersEntity timersEntity : entities) {
			beans.add(timersServiceMapper.mapTimersEntityToTimers(timersEntity));
		}
		return beans;
	}

	@Override
	public Timers save(Timers timers) {
		return update(timers) ;
	}

	@Override
	public Timers create(Timers timers) {
		TimersEntity timersEntity = timersJpaRepository.findOne(timers.getId());
		if( timersEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		timersEntity = new TimersEntity();
		timersServiceMapper.mapTimersToTimersEntity(timers, timersEntity);
		TimersEntity timersEntitySaved = timersJpaRepository.save(timersEntity);
		return timersServiceMapper.mapTimersEntityToTimers(timersEntitySaved);
	}

	@Override
	public Timers update(Timers timers) {
		TimersEntity timersEntity = timersJpaRepository.findOne(timers.getId());
		timersServiceMapper.mapTimersToTimersEntity(timers, timersEntity);
		TimersEntity timersEntitySaved = timersJpaRepository.save(timersEntity);
		return timersServiceMapper.mapTimersEntityToTimers(timersEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		timersJpaRepository.delete(id);
	}

	public TimersJpaRepository getTimersJpaRepository() {
		return timersJpaRepository;
	}

	public void setTimersJpaRepository(TimersJpaRepository timersJpaRepository) {
		this.timersJpaRepository = timersJpaRepository;
	}

	public TimersServiceMapper getTimersServiceMapper() {
		return timersServiceMapper;
	}

	public void setTimersServiceMapper(TimersServiceMapper timersServiceMapper) {
		this.timersServiceMapper = timersServiceMapper;
	}

}
