/*
 * Created on 29 avr. 2016 ( Time 13:45:39 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.MetricsRegistry;
import org.demo.bean.jpa.MetricsRegistryEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.MetricsRegistryServiceMapper;
import org.demo.data.repository.jpa.MetricsRegistryJpaRepository;
import org.demo.test.MetricsRegistryFactoryForTest;
import org.demo.test.MetricsRegistryEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of MetricsRegistryService
 */
@RunWith(MockitoJUnitRunner.class)
public class MetricsRegistryServiceImplTest {

	@InjectMocks
	private MetricsRegistryServiceImpl metricsRegistryService;
	@Mock
	private MetricsRegistryJpaRepository metricsRegistryJpaRepository;
	@Mock
	private MetricsRegistryServiceMapper metricsRegistryServiceMapper;
	
	private MetricsRegistryFactoryForTest metricsRegistryFactoryForTest = new MetricsRegistryFactoryForTest();

	private MetricsRegistryEntityFactoryForTest metricsRegistryEntityFactoryForTest = new MetricsRegistryEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		MetricsRegistryEntity metricsRegistryEntity = metricsRegistryJpaRepository.findOne(id);
		
		MetricsRegistry metricsRegistry = metricsRegistryFactoryForTest.newMetricsRegistry();
		when(metricsRegistryServiceMapper.mapMetricsRegistryEntityToMetricsRegistry(metricsRegistryEntity)).thenReturn(metricsRegistry);

		// When
		MetricsRegistry metricsRegistryFound = metricsRegistryService.findById(id);

		// Then
		assertEquals(metricsRegistry.getId(),metricsRegistryFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<MetricsRegistryEntity> metricsRegistryEntitys = new ArrayList<MetricsRegistryEntity>();
		MetricsRegistryEntity metricsRegistryEntity1 = metricsRegistryEntityFactoryForTest.newMetricsRegistryEntity();
		metricsRegistryEntitys.add(metricsRegistryEntity1);
		MetricsRegistryEntity metricsRegistryEntity2 = metricsRegistryEntityFactoryForTest.newMetricsRegistryEntity();
		metricsRegistryEntitys.add(metricsRegistryEntity2);
		when(metricsRegistryJpaRepository.findAll()).thenReturn(metricsRegistryEntitys);
		
		MetricsRegistry metricsRegistry1 = metricsRegistryFactoryForTest.newMetricsRegistry();
		when(metricsRegistryServiceMapper.mapMetricsRegistryEntityToMetricsRegistry(metricsRegistryEntity1)).thenReturn(metricsRegistry1);
		MetricsRegistry metricsRegistry2 = metricsRegistryFactoryForTest.newMetricsRegistry();
		when(metricsRegistryServiceMapper.mapMetricsRegistryEntityToMetricsRegistry(metricsRegistryEntity2)).thenReturn(metricsRegistry2);

		// When
		List<MetricsRegistry> metricsRegistrysFounds = metricsRegistryService.findAll();

		// Then
		assertTrue(metricsRegistry1 == metricsRegistrysFounds.get(0));
		assertTrue(metricsRegistry2 == metricsRegistrysFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		MetricsRegistry metricsRegistry = metricsRegistryFactoryForTest.newMetricsRegistry();

		MetricsRegistryEntity metricsRegistryEntity = metricsRegistryEntityFactoryForTest.newMetricsRegistryEntity();
		when(metricsRegistryJpaRepository.findOne(metricsRegistry.getId())).thenReturn(null);
		
		metricsRegistryEntity = new MetricsRegistryEntity();
		metricsRegistryServiceMapper.mapMetricsRegistryToMetricsRegistryEntity(metricsRegistry, metricsRegistryEntity);
		MetricsRegistryEntity metricsRegistryEntitySaved = metricsRegistryJpaRepository.save(metricsRegistryEntity);
		
		MetricsRegistry metricsRegistrySaved = metricsRegistryFactoryForTest.newMetricsRegistry();
		when(metricsRegistryServiceMapper.mapMetricsRegistryEntityToMetricsRegistry(metricsRegistryEntitySaved)).thenReturn(metricsRegistrySaved);

		// When
		MetricsRegistry metricsRegistryResult = metricsRegistryService.create(metricsRegistry);

		// Then
		assertTrue(metricsRegistryResult == metricsRegistrySaved);
	}

	@Test
	public void createKOExists() {
		// Given
		MetricsRegistry metricsRegistry = metricsRegistryFactoryForTest.newMetricsRegistry();

		MetricsRegistryEntity metricsRegistryEntity = metricsRegistryEntityFactoryForTest.newMetricsRegistryEntity();
		when(metricsRegistryJpaRepository.findOne(metricsRegistry.getId())).thenReturn(metricsRegistryEntity);

		// When
		Exception exception = null;
		try {
			metricsRegistryService.create(metricsRegistry);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		MetricsRegistry metricsRegistry = metricsRegistryFactoryForTest.newMetricsRegistry();

		MetricsRegistryEntity metricsRegistryEntity = metricsRegistryEntityFactoryForTest.newMetricsRegistryEntity();
		when(metricsRegistryJpaRepository.findOne(metricsRegistry.getId())).thenReturn(metricsRegistryEntity);
		
		MetricsRegistryEntity metricsRegistryEntitySaved = metricsRegistryEntityFactoryForTest.newMetricsRegistryEntity();
		when(metricsRegistryJpaRepository.save(metricsRegistryEntity)).thenReturn(metricsRegistryEntitySaved);
		
		MetricsRegistry metricsRegistrySaved = metricsRegistryFactoryForTest.newMetricsRegistry();
		when(metricsRegistryServiceMapper.mapMetricsRegistryEntityToMetricsRegistry(metricsRegistryEntitySaved)).thenReturn(metricsRegistrySaved);

		// When
		MetricsRegistry metricsRegistryResult = metricsRegistryService.update(metricsRegistry);

		// Then
		verify(metricsRegistryServiceMapper).mapMetricsRegistryToMetricsRegistryEntity(metricsRegistry, metricsRegistryEntity);
		assertTrue(metricsRegistryResult == metricsRegistrySaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		metricsRegistryService.delete(id);

		// Then
		verify(metricsRegistryJpaRepository).delete(id);
		
	}

}
