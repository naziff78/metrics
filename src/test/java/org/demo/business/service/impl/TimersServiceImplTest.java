/*
 * Created on 29 avr. 2016 ( Time 13:45:39 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.Timers;
import org.demo.bean.jpa.TimersEntity;
import java.util.Date;
import org.demo.business.service.mapping.TimersServiceMapper;
import org.demo.data.repository.jpa.TimersJpaRepository;
import org.demo.test.TimersFactoryForTest;
import org.demo.test.TimersEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TimersService
 */
@RunWith(MockitoJUnitRunner.class)
public class TimersServiceImplTest {

	@InjectMocks
	private TimersServiceImpl timersService;
	@Mock
	private TimersJpaRepository timersJpaRepository;
	@Mock
	private TimersServiceMapper timersServiceMapper;
	
	private TimersFactoryForTest timersFactoryForTest = new TimersFactoryForTest();

	private TimersEntityFactoryForTest timersEntityFactoryForTest = new TimersEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		TimersEntity timersEntity = timersJpaRepository.findOne(id);
		
		Timers timers = timersFactoryForTest.newTimers();
		when(timersServiceMapper.mapTimersEntityToTimers(timersEntity)).thenReturn(timers);

		// When
		Timers timersFound = timersService.findById(id);

		// Then
		assertEquals(timers.getId(),timersFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<TimersEntity> timersEntitys = new ArrayList<TimersEntity>();
		TimersEntity timersEntity1 = timersEntityFactoryForTest.newTimersEntity();
		timersEntitys.add(timersEntity1);
		TimersEntity timersEntity2 = timersEntityFactoryForTest.newTimersEntity();
		timersEntitys.add(timersEntity2);
		when(timersJpaRepository.findAll()).thenReturn(timersEntitys);
		
		Timers timers1 = timersFactoryForTest.newTimers();
		when(timersServiceMapper.mapTimersEntityToTimers(timersEntity1)).thenReturn(timers1);
		Timers timers2 = timersFactoryForTest.newTimers();
		when(timersServiceMapper.mapTimersEntityToTimers(timersEntity2)).thenReturn(timers2);

		// When
		List<Timers> timerssFounds = timersService.findAll();

		// Then
		assertTrue(timers1 == timerssFounds.get(0));
		assertTrue(timers2 == timerssFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Timers timers = timersFactoryForTest.newTimers();

		TimersEntity timersEntity = timersEntityFactoryForTest.newTimersEntity();
		when(timersJpaRepository.findOne(timers.getId())).thenReturn(null);
		
		timersEntity = new TimersEntity();
		timersServiceMapper.mapTimersToTimersEntity(timers, timersEntity);
		TimersEntity timersEntitySaved = timersJpaRepository.save(timersEntity);
		
		Timers timersSaved = timersFactoryForTest.newTimers();
		when(timersServiceMapper.mapTimersEntityToTimers(timersEntitySaved)).thenReturn(timersSaved);

		// When
		Timers timersResult = timersService.create(timers);

		// Then
		assertTrue(timersResult == timersSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Timers timers = timersFactoryForTest.newTimers();

		TimersEntity timersEntity = timersEntityFactoryForTest.newTimersEntity();
		when(timersJpaRepository.findOne(timers.getId())).thenReturn(timersEntity);

		// When
		Exception exception = null;
		try {
			timersService.create(timers);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Timers timers = timersFactoryForTest.newTimers();

		TimersEntity timersEntity = timersEntityFactoryForTest.newTimersEntity();
		when(timersJpaRepository.findOne(timers.getId())).thenReturn(timersEntity);
		
		TimersEntity timersEntitySaved = timersEntityFactoryForTest.newTimersEntity();
		when(timersJpaRepository.save(timersEntity)).thenReturn(timersEntitySaved);
		
		Timers timersSaved = timersFactoryForTest.newTimers();
		when(timersServiceMapper.mapTimersEntityToTimers(timersEntitySaved)).thenReturn(timersSaved);

		// When
		Timers timersResult = timersService.update(timers);

		// Then
		verify(timersServiceMapper).mapTimersToTimersEntity(timers, timersEntity);
		assertTrue(timersResult == timersSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		timersService.delete(id);

		// Then
		verify(timersJpaRepository).delete(id);
		
	}

}
