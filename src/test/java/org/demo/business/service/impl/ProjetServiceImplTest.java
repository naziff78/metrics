/*
 * Created on 29 avr. 2016 ( Time 13:45:39 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.Projet;
import org.demo.bean.jpa.ProjetEntity;
import java.util.List;
import org.demo.business.service.mapping.ProjetServiceMapper;
import org.demo.data.repository.jpa.ProjetJpaRepository;
import org.demo.test.ProjetFactoryForTest;
import org.demo.test.ProjetEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ProjetService
 */
@RunWith(MockitoJUnitRunner.class)
public class ProjetServiceImplTest {

	@InjectMocks
	private ProjetServiceImpl projetService;
	@Mock
	private ProjetJpaRepository projetJpaRepository;
	@Mock
	private ProjetServiceMapper projetServiceMapper;
	
	private ProjetFactoryForTest projetFactoryForTest = new ProjetFactoryForTest();

	private ProjetEntityFactoryForTest projetEntityFactoryForTest = new ProjetEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		ProjetEntity projetEntity = projetJpaRepository.findOne(id);
		
		Projet projet = projetFactoryForTest.newProjet();
		when(projetServiceMapper.mapProjetEntityToProjet(projetEntity)).thenReturn(projet);

		// When
		Projet projetFound = projetService.findById(id);

		// Then
		assertEquals(projet.getId(),projetFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ProjetEntity> projetEntitys = new ArrayList<ProjetEntity>();
		ProjetEntity projetEntity1 = projetEntityFactoryForTest.newProjetEntity();
		projetEntitys.add(projetEntity1);
		ProjetEntity projetEntity2 = projetEntityFactoryForTest.newProjetEntity();
		projetEntitys.add(projetEntity2);
		when(projetJpaRepository.findAll()).thenReturn(projetEntitys);
		
		Projet projet1 = projetFactoryForTest.newProjet();
		when(projetServiceMapper.mapProjetEntityToProjet(projetEntity1)).thenReturn(projet1);
		Projet projet2 = projetFactoryForTest.newProjet();
		when(projetServiceMapper.mapProjetEntityToProjet(projetEntity2)).thenReturn(projet2);

		// When
		List<Projet> projetsFounds = projetService.findAll();

		// Then
		assertTrue(projet1 == projetsFounds.get(0));
		assertTrue(projet2 == projetsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Projet projet = projetFactoryForTest.newProjet();

		ProjetEntity projetEntity = projetEntityFactoryForTest.newProjetEntity();
		when(projetJpaRepository.findOne(projet.getId())).thenReturn(null);
		
		projetEntity = new ProjetEntity();
		projetServiceMapper.mapProjetToProjetEntity(projet, projetEntity);
		ProjetEntity projetEntitySaved = projetJpaRepository.save(projetEntity);
		
		Projet projetSaved = projetFactoryForTest.newProjet();
		when(projetServiceMapper.mapProjetEntityToProjet(projetEntitySaved)).thenReturn(projetSaved);

		// When
		Projet projetResult = projetService.create(projet);

		// Then
		assertTrue(projetResult == projetSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Projet projet = projetFactoryForTest.newProjet();

		ProjetEntity projetEntity = projetEntityFactoryForTest.newProjetEntity();
		when(projetJpaRepository.findOne(projet.getId())).thenReturn(projetEntity);

		// When
		Exception exception = null;
		try {
			projetService.create(projet);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Projet projet = projetFactoryForTest.newProjet();

		ProjetEntity projetEntity = projetEntityFactoryForTest.newProjetEntity();
		when(projetJpaRepository.findOne(projet.getId())).thenReturn(projetEntity);
		
		ProjetEntity projetEntitySaved = projetEntityFactoryForTest.newProjetEntity();
		when(projetJpaRepository.save(projetEntity)).thenReturn(projetEntitySaved);
		
		Projet projetSaved = projetFactoryForTest.newProjet();
		when(projetServiceMapper.mapProjetEntityToProjet(projetEntitySaved)).thenReturn(projetSaved);

		// When
		Projet projetResult = projetService.update(projet);

		// Then
		verify(projetServiceMapper).mapProjetToProjetEntity(projet, projetEntity);
		assertTrue(projetResult == projetSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		projetService.delete(id);

		// Then
		verify(projetJpaRepository).delete(id);
		
	}

}
