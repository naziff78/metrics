/*
 * Created on 29 avr. 2016 ( Time 13:45:39 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.Timers;
import org.demo.bean.jpa.TimersEntity;
import org.demo.bean.jpa.MetricsRegistryEntity;
import org.demo.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class TimersServiceMapperTest {

	private TimersServiceMapper timersServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		timersServiceMapper = new TimersServiceMapper();
		timersServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'TimersEntity' to 'Timers'
	 * @param timersEntity
	 */
	@Test
	public void testMapTimersEntityToTimers() {
		// Given
		TimersEntity timersEntity = new TimersEntity();
		timersEntity.setNom(mockValues.nextString(255));
		timersEntity.setCount(mockValues.nextString(2147483647));
		timersEntity.setMeanRate(mockValues.nextDouble());
		timersEntity.setOneMinuteRate(mockValues.nextDouble());
		timersEntity.setFiveMinuteRate(mockValues.nextDouble());
		timersEntity.setFifteenMinuteRate(mockValues.nextDouble());
		timersEntity.setMin(mockValues.nextString(2147483647));
		timersEntity.setMax(mockValues.nextString(2147483647));
		timersEntity.setMean(mockValues.nextDouble());
		timersEntity.setStddev(mockValues.nextInteger());
		timersEntity.setMedian(mockValues.nextDouble());
		timersEntity.setSeventyFivePercent(mockValues.nextDouble());
		timersEntity.setNinetyFivePercent(mockValues.nextDouble());
		timersEntity.setNinetyHeightPercent(mockValues.nextDouble());
		timersEntity.setNinetyNinePercent(mockValues.nextDouble());
		timersEntity.setNinetyNinePercentPointNine(mockValues.nextDouble());
		timersEntity.setDateCreation(mockValues.nextDate());
		timersEntity.setDateModification(mockValues.nextDate());
		timersEntity.setMetricsRegistry(new MetricsRegistryEntity());
		timersEntity.getMetricsRegistry().setId(mockValues.nextInteger());
		
		// When
		Timers timers = timersServiceMapper.mapTimersEntityToTimers(timersEntity);
		
		// Then
		assertEquals(timersEntity.getNom(), timers.getNom());
		assertEquals(timersEntity.getCount(), timers.getCount());
		assertEquals(timersEntity.getMeanRate(), timers.getMeanRate());
		assertEquals(timersEntity.getOneMinuteRate(), timers.getOneMinuteRate());
		assertEquals(timersEntity.getFiveMinuteRate(), timers.getFiveMinuteRate());
		assertEquals(timersEntity.getFifteenMinuteRate(), timers.getFifteenMinuteRate());
		assertEquals(timersEntity.getMin(), timers.getMin());
		assertEquals(timersEntity.getMax(), timers.getMax());
		assertEquals(timersEntity.getMean(), timers.getMean());
		assertEquals(timersEntity.getStddev(), timers.getStddev());
		assertEquals(timersEntity.getMedian(), timers.getMedian());
		assertEquals(timersEntity.getSeventyFivePercent(), timers.getSeventyFivePercent());
		assertEquals(timersEntity.getNinetyFivePercent(), timers.getNinetyFivePercent());
		assertEquals(timersEntity.getNinetyHeightPercent(), timers.getNinetyHeightPercent());
		assertEquals(timersEntity.getNinetyNinePercent(), timers.getNinetyNinePercent());
		assertEquals(timersEntity.getNinetyNinePercentPointNine(), timers.getNinetyNinePercentPointNine());
		assertEquals(timersEntity.getDateCreation(), timers.getDateCreation());
		assertEquals(timersEntity.getDateModification(), timers.getDateModification());
		assertEquals(timersEntity.getMetricsRegistry().getId(), timers.getIdMetricsRegistry());
	}
	
	/**
	 * Test : Mapping from 'Timers' to 'TimersEntity'
	 */
	@Test
	public void testMapTimersToTimersEntity() {
		// Given
		Timers timers = new Timers();
		timers.setNom(mockValues.nextString(255));
		timers.setCount(mockValues.nextString(2147483647));
		timers.setMeanRate(mockValues.nextDouble());
		timers.setOneMinuteRate(mockValues.nextDouble());
		timers.setFiveMinuteRate(mockValues.nextDouble());
		timers.setFifteenMinuteRate(mockValues.nextDouble());
		timers.setMin(mockValues.nextString(2147483647));
		timers.setMax(mockValues.nextString(2147483647));
		timers.setMean(mockValues.nextDouble());
		timers.setStddev(mockValues.nextInteger());
		timers.setMedian(mockValues.nextDouble());
		timers.setSeventyFivePercent(mockValues.nextDouble());
		timers.setNinetyFivePercent(mockValues.nextDouble());
		timers.setNinetyHeightPercent(mockValues.nextDouble());
		timers.setNinetyNinePercent(mockValues.nextDouble());
		timers.setNinetyNinePercentPointNine(mockValues.nextDouble());
		timers.setDateCreation(mockValues.nextDate());
		timers.setDateModification(mockValues.nextDate());
		timers.setIdMetricsRegistry(mockValues.nextInteger());

		TimersEntity timersEntity = new TimersEntity();
		
		// When
		timersServiceMapper.mapTimersToTimersEntity(timers, timersEntity);
		
		// Then
		assertEquals(timers.getNom(), timersEntity.getNom());
		assertEquals(timers.getCount(), timersEntity.getCount());
		assertEquals(timers.getMeanRate(), timersEntity.getMeanRate());
		assertEquals(timers.getOneMinuteRate(), timersEntity.getOneMinuteRate());
		assertEquals(timers.getFiveMinuteRate(), timersEntity.getFiveMinuteRate());
		assertEquals(timers.getFifteenMinuteRate(), timersEntity.getFifteenMinuteRate());
		assertEquals(timers.getMin(), timersEntity.getMin());
		assertEquals(timers.getMax(), timersEntity.getMax());
		assertEquals(timers.getMean(), timersEntity.getMean());
		assertEquals(timers.getStddev(), timersEntity.getStddev());
		assertEquals(timers.getMedian(), timersEntity.getMedian());
		assertEquals(timers.getSeventyFivePercent(), timersEntity.getSeventyFivePercent());
		assertEquals(timers.getNinetyFivePercent(), timersEntity.getNinetyFivePercent());
		assertEquals(timers.getNinetyHeightPercent(), timersEntity.getNinetyHeightPercent());
		assertEquals(timers.getNinetyNinePercent(), timersEntity.getNinetyNinePercent());
		assertEquals(timers.getNinetyNinePercentPointNine(), timersEntity.getNinetyNinePercentPointNine());
		assertEquals(timers.getDateCreation(), timersEntity.getDateCreation());
		assertEquals(timers.getDateModification(), timersEntity.getDateModification());
		assertEquals(timers.getIdMetricsRegistry(), timersEntity.getMetricsRegistry().getId());
	}

}